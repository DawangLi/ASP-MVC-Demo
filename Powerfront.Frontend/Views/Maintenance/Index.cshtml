@model IEnumerable<Powerfront.Backend.Model.AggregateCustomerViewModel>

@{
    ViewBag.Title = "Customer Maintenance";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4 class="text-muted">@ViewBag.Title</h4>

<table class="table">

    @{

        List<Powerfront.Backend.EntityFramework.Property> uniqueProperties = ViewBag.Properties;

        //foreach (var item in Model)
        //{
        //    foreach (var customerRecord in item.CustomerDataRecords)
        //    {
        //        if (uniqueProperties.Contains(customerRecord.Property.Name) == false)
        //        {
        //            uniqueProperties.Add(customerRecord.Property.Name);
        //        }

        //    }
        //}
        uniqueProperties.Sort((x, y) => x.Name.CompareTo(y.Name));

        foreach (var property in uniqueProperties)
        {
            @Html.Raw("<th>");
            @Html.Label(property.Name, new { @class = "text-muted" })
            @Html.Raw("</th>");
        }
        @Html.Raw("<th></th>");
        //@Html.Raw("</tr>");
        foreach (var customer in Model)
        {
            @Html.Raw("<tr>");
            int count = 0;
            int uniquePropertiesCount = uniqueProperties.Count;
            int customerRecordCount = customer.CustomerDataRecords.Count;
            foreach (var property in uniqueProperties)
            {
                var record = customer.CustomerDataRecords.Where(x => x.Property.Name == property.Name).FirstOrDefault();

                if (record != null)
                {

                    if (record.Property.Name == property.Name)
                    {
                        string currentPropertyValue;
                        if (record.Value != null || record.Value != String.Empty)
                        {
                            currentPropertyValue = record.Value;
                        }
                        else
                        {
                            currentPropertyValue = String.Empty;
                        }
                        @Html.Raw("<td>");
                        @Html.Raw("<p class=\"text-info\">" + @currentPropertyValue + "</p>");
                        @Html.Raw("</td>");
                        bool shouldRenderEditLinks = count == customerRecordCount - 1;
                        if (shouldRenderEditLinks)
                        {
                            @*bool shouldRenderEmptyCell = customerRecordCount < uniquePropertiesCount;

                            if (shouldRenderEmptyCell)
                            {
                                <td></td>
                            }*@
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { id = @record.CustomerId }) |
                                @Html.ActionLink("Details", "Details", new { id = @record.CustomerId }) |
                                @Html.ActionLink("Delete", "Delete", new { id = @record.CustomerId })
                            </td>

                        }
                        count++;

                    }

                }
                else
                {
                    <td></td>
                }
            }
            @Html.Raw("</tr>");
        }

    }


</table>



<p>@Html.ActionLink("Create New", "Create", "Maintenance", null, new { @class = "btn btn-primary btn-md", @id = "MaintenanceButton" })</p>

